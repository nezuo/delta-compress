[{"title":"DeltaCompress","type":0,"sectionRef":"#","url":"/delta-compress/docs/intro","content":"","keywords":""},{"title":"Supported Data​","type":1,"pageTitle":"DeltaCompress","url":"/delta-compress/docs/intro#supported-data","content":"arraydictionary (except ones with number keys)stringnumberbooleanVector2Vector3Vector2int16Vector3int16CFrame To get started, visit the Usage page. "},{"title":"Usage","type":0,"sectionRef":"#","url":"/delta-compress/docs/Usage","content":"","keywords":""},{"title":"Server data updated immutably​","type":1,"pageTitle":"Usage","url":"/delta-compress/docs/Usage#server-data-updated-immutably","content":"local gameStats = { round = 0, playerCount = 0, } local lastSent = gameStats local function incrementRound() gameStats = Sift.Dictionary.merge(gameStats, { round = gameStats.round + 1, }) end local function onPlayerAdded(player: Player) -- When a new player joins, we can send them a diff between nil and gameStats. local initialDiff = DeltaCompress.diffImmutable(nil, gameStats) ReplicatedStorage.RoundInfoUpdateRemote:FireClient(initialDiff) end RunService.Heartbeat:Connect(function() if lastSent == gameStats then -- gameStats hasn't changed. return end -- Since data is update immutably, there should always be a diff. local diff = DeltaCompress.diffImmutable(lastSent, gameStats) lastSent = gameStats ReplicatedStorage.RoundInfoUpdateRemote:FireAllClients(diff) end)  "},{"title":"Server data updated mutably​","type":1,"pageTitle":"Usage","url":"/delta-compress/docs/Usage#server-data-updated-mutably","content":"local gameStats = { round = 0, playerCount = 0, } local lastSent = nil local function incrementRound() gameStats.round += 1 end local function onPlayerAdded(player: Player) -- When a new player joins, we can send them a diff between nil and gameStats. local initialDiff, updatedLastSent = DeltaCompress.diffMutable(nil, gameStats) lastSent = updatedLastSent ReplicatedStorage.RoundInfoUpdateRemote:FireClient(initialDiff) end RunService.Heartbeat:Connect(function() local diff, updatedLastSent = DeltaCompress.diff(lastSent, gameStats) if diff == nil then -- gameStats hasn't changed. return end lastSent = updatedLastSent ReplicatedStorage.RoundInfoUpdateRemote:FireAllClients(diff) end)  "},{"title":"Client​","type":1,"pageTitle":"Usage","url":"/delta-compress/docs/Usage#client","content":"local gameStats = nil ReplicatedStorage.RoundInfoUpdateRemote.OnClientEvent(function(diff) -- The diff can be applied immutably or mutably depending on your usecase! gameStats = DeltaCompress.applyImmutable(gameStats, diff) end)  "},{"title":"DeltaCompress","type":0,"sectionRef":"#","url":"/delta-compress/api/DeltaCompress","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DeltaCompress","url":"/delta-compress/api/DeltaCompress#functions","content":" "},{"title":"applyImmutable​","type":1,"pageTitle":"DeltaCompress","url":"/delta-compress/api/DeltaCompress#applyImmutable","content":"&lt;/&gt; DeltaCompress.applyImmutable( old: any, diff: buffer ) → any Applies a diff created by DeltaCompress.diffImmutable or DeltaCompress.diffMutable immutably. The old value passed won't mutated, instead, a new value will be returned. local old = { coins = 10, completedTutorial = true } local new = { coins = 320, completedTutorial = true } local diff = DeltaCompress.diff(old, new) local applied = DeltaCompress.applyImmutable(old, diff) print(applied) -- { coins = 320, completedTutorial = true } -- `old` didn't change since the diff was applied immutably. print(old) -- { coins = 10, completedTutorial = true }   "},{"title":"applyMutable​","type":1,"pageTitle":"DeltaCompress","url":"/delta-compress/api/DeltaCompress#applyMutable","content":"&lt;/&gt; DeltaCompress.applyMutable( old: any, diff: buffer ) → any Applies a diff created by DeltaCompress.diffImmutable or DeltaCompress.diffMutable mutably. The old value passed will be mutated. local old = { coins = 10, completedTutorial = true } local new = { coins = 320, completedTutorial = true } local diff = DeltaCompress.diff(old, new) local applied = DeltaCompress.applyMutable(old, diff) print(applied) -- { coins = 320, completedTutorial = true } -- `old` was mutated and returned, `applied` and `old` are the same table. print(applied == old) -- true Though tables are updated mutably, other data types have to be returned from the function: local old = 100 local new = &quot;hello&quot; local diff = DeltaCompress.diff(old, new) local applied = DeltaCompress.applyMutable(old, diff) print(applied) -- &quot;hello&quot;   "},{"title":"diffImmutable​","type":1,"pageTitle":"DeltaCompress","url":"/delta-compress/api/DeltaCompress#diffImmutable","content":"&lt;/&gt; DeltaCompress.diffImmutable( old: any, new: any ) → buffer?-- A buffer representing the difference, or nil if there are no differences. Calculates the difference between old and new and returns it as a buffer. If old and new are identical, it returns nil. local old = { coins = 10, completedTutorial = true } local new = { coins = 320, completedTutorial = true } local diff = DeltaCompress.diffImmutable(old, new) -- Returns a buffer that encodes the change in coins.   "},{"title":"diffMutable​","type":1,"pageTitle":"DeltaCompress","url":"/delta-compress/api/DeltaCompress#diffMutable","content":"&lt;/&gt; DeltaCompress.diffMutable( old: any, new: any ) → ( buffer?, any? )-- A buffer representing the difference and the updated old value, or nil if there are no differences. Similar to DeltaCompress.diffImuttable except that it returns a copy of new that can be used as the old value. This function can be more efficient than deep copying new when new is updated mutably. It mutates old with changes from new, avoiding unnecessary copying of unchanged data. local data = { coins = 320, completedTutorial = true } local diff, old = DeltaCompress.diffMutable(nil, data) data.coins += 100 local diff, updatedOld = DeltaCompress.diffMutable(old, data)  "}]