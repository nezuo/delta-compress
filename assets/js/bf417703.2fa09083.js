"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[476],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,f=u["".concat(d,".").concat(m)]||u[m]||p[m]||l;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},55022:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={},o=void 0,i={unversionedId:"Usage",id:"Usage",title:"Usage",description:"Server data updated immutably",source:"@site/docs/Usage.md",sourceDirName:".",slug:"/Usage",permalink:"/delta-compress/docs/Usage",draft:!1,editUrl:"https://github.com/nezuo/delta-compress/edit/master/docs/Usage.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"DeltaCompress",permalink:"/delta-compress/docs/intro"}},d={},s=[{value:"Server data updated immutably",id:"server-data-updated-immutably",level:3},{value:"Server data updated mutably",id:"server-data-updated-mutably",level:3},{value:"Client",id:"client",level:3}],c={toc:s},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"server-data-updated-immutably"},"Server data updated immutably"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local gameStats = {\n    round = 0,\n    playerCount = 0,\n}\nlocal lastSent = gameStats\n\nlocal function incrementRound()\n    gameStats = Sift.Dictionary.merge(gameStats, {\n        round = gameStats.round + 1,\n    })\nend\n\nlocal function onPlayerAdded(player: Player)\n    -- When a new player joins, we can send them a diff between nil and gameStats.\n    local initialDiff = DeltaCompress.diffImmutable(nil, gameStats)\n\n    ReplicatedStorage.RoundInfoUpdateRemote:FireClient(initialDiff)\nend\n\nRunService.Heartbeat:Connect(function()\n    if lastSent == gameStats then\n        -- gameStats hasn't changed.\n        return\n    end\n\n    -- Since data is update immutably, there should always be a diff.\n    local diff = DeltaCompress.diffImmutable(lastSent, gameStats)\n\n    lastSent = gameStats\n\n    ReplicatedStorage.RoundInfoUpdateRemote:FireAllClients(diff)\nend)\n")),(0,r.kt)("h3",{id:"server-data-updated-mutably"},"Server data updated mutably"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local gameStats = {\n    round = 0,\n    playerCount = 0,\n}\nlocal lastSent = nil\n\nlocal function incrementRound()\n    gameStats.round += 1\nend\n\nlocal function onPlayerAdded(player: Player)\n    -- When a new player joins, we can send them a diff between nil and gameStats.\n    local initialDiff, updatedLastSent = DeltaCompress.diffMutable(nil, gameStats)\n\n    lastSent = updatedLastSent\n\n    ReplicatedStorage.RoundInfoUpdateRemote:FireClient(initialDiff)\nend\n\nRunService.Heartbeat:Connect(function()\n    local diff, updatedLastSent = DeltaCompress.diff(lastSent, gameStats)\n\n    if diff == nil then\n        -- gameStats hasn't changed.\n        return\n    end\n\n    lastSent = updatedLastSent\n\n    ReplicatedStorage.RoundInfoUpdateRemote:FireAllClients(diff)\nend)\n")),(0,r.kt)("h3",{id:"client"},"Client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local gameStats = nil\n\nReplicatedStorage.RoundInfoUpdateRemote.OnClientEvent(function(diff)\n    -- The diff can be applied immutably or mutably depending on your usecase!\n    gameStats = DeltaCompress.applyImmutable(gameStats, diff)\nend)\n")))}p.isMDXComponent=!0}}]);