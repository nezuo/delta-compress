"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[938],{69766:e=>{e.exports=JSON.parse('{"functions":[{"name":"applyImmutable","desc":"Applies a diff created by [DeltaCompress.diffImmutable] or [DeltaCompress.diffMutable] immutably. The `old` value passed won\'t mutated, instead, a new value will be returned.\\n\\n```lua\\nlocal old = { coins = 10, completedTutorial = true }\\nlocal new = { coins = 320, completedTutorial = true }\\nlocal diff = DeltaCompress.diff(old, new)\\n\\nlocal applied = DeltaCompress.applyImmutable(old, diff)\\n\\nprint(applied) -- { coins = 320, completedTutorial = true }\\n\\n-- `old` didn\'t change since the diff was applied immutably.\\nprint(old) -- { coins = 10, completedTutorial = true }\\n```","params":[{"name":"old","desc":"","lua_type":"any"},{"name":"diff","desc":"","lua_type":"buffer"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"static","source":{"line":166,"path":"src/Apply.lua"}},{"name":"applyMutable","desc":"Applies a diff created by [DeltaCompress.diffImmutable] or [DeltaCompress.diffMutable] mutably. The `old` value passed will be mutated.\\n\\n```lua\\nlocal old = { coins = 10, completedTutorial = true }\\nlocal new = { coins = 320, completedTutorial = true }\\nlocal diff = DeltaCompress.diff(old, new)\\n\\nlocal applied = DeltaCompress.applyMutable(old, diff)\\n\\nprint(applied) -- { coins = 320, completedTutorial = true }\\n\\n-- `old` was mutated and returned, `applied` and `old` are the same table.\\nprint(applied == old) -- true\\n```\\n\\nThough tables are updated mutably, other data types have to be returned from the function:\\n```lua\\nlocal old = 100\\nlocal new = \\"hello\\"\\nlocal diff = DeltaCompress.diff(old, new)\\n\\nlocal applied = DeltaCompress.applyMutable(old, diff)\\n\\nprint(applied) -- \\"hello\\"\\n```","params":[{"name":"old","desc":"","lua_type":"any"},{"name":"diff","desc":"","lua_type":"buffer"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"static","source":{"line":202,"path":"src/Apply.lua"}},{"name":"diffImmutable","desc":"Calculates the difference between `old` and `new` and returns it as a `buffer`. If `old` and `new` are identical, it returns `nil`.\\n\\n```lua\\nlocal old = { coins = 10, completedTutorial = true }\\nlocal new = { coins = 320, completedTutorial = true }\\n\\nlocal diff = DeltaCompress.diffImmutable(old, new) -- Returns a buffer that encodes the change in coins.\\n```","params":[{"name":"old","desc":"","lua_type":"any"},{"name":"new","desc":"","lua_type":"any"}],"returns":[{"desc":"A buffer representing the difference, or `nil` if there are no differences.","lua_type":"buffer?"}],"function_type":"static","source":{"line":312,"path":"src/Diff.lua"}},{"name":"diffMutable","desc":"Similar to [DeltaCompress.diffImuttable] except that it returns a copy of `new` that can be used as the old value.\\n\\nThis function can be more efficient than deep copying `new` when `new` is updated mutably. It mutates `old` with changes from `new`, avoiding unnecessary copying of unchanged data.\\n\\n```lua\\nlocal data = { coins = 320, completedTutorial = true }\\n\\nlocal diff, old = DeltaCompress.diffMutable(nil, data)\\n\\ndata.coins += 100\\n\\nlocal diff, updatedOld = DeltaCompress.diffMutable(old, data)\\n```","params":[{"name":"old","desc":"","lua_type":"any"},{"name":"new","desc":"","lua_type":"any"}],"returns":[{"desc":"A buffer representing the difference and the updated old value, or `nil` if there are no differences.","lua_type":"(buffer?, any?)"}],"function_type":"static","source":{"line":370,"path":"src/Diff.lua"}}],"properties":[],"types":[],"name":"DeltaCompress","desc":"","source":{"line":7,"path":"src/init.lua"}}')}}]);