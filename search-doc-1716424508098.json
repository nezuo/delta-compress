[{"title":"DeltaCompress","type":0,"sectionRef":"#","url":"/delta-compress/docs/intro","content":"DeltaCompress DeltaCompress is a Roblox library to efficiently replicate tables. It calculates the difference between two tables that can be sent as a buffer. To get started, visit the Usage page.","keywords":""},{"title":"Usage","type":0,"sectionRef":"#","url":"/delta-compress/docs/Usage","content":"","keywords":""},{"title":"Server data updated immutably​","type":1,"pageTitle":"Usage","url":"/delta-compress/docs/Usage#server-data-updated-immutably","content":"local gameStats = { round = 0, playerCount = 0, } local lastSent = gameStats local function incrementRound() gameStats = Sift.Dictionary.merge(gameStats, { round = gameStats.round + 1, }) end local function onPlayerAdded(player: Player) -- When a new player joins, we can send them a diff between nil and gameStats. local initialDiff = DeltaCompress.diff(nil, gameStats) ReplicatedStorage.RoundInfoUpdateRemote:FireClient(initialDiff) end RunService.Heartbeat:Connect(function() if lastSent == gameStats then -- gameStats hasn't changed. return end -- Since data is update immutably, there should always be a diff. local diff = DeltaCompress.diff(lastSent, gameStats) lastSent = gameStats ReplicatedStorage.RoundInfoUpdateRemote:FireAllClients(diff) end)  "},{"title":"Server data updated mutably​","type":1,"pageTitle":"Usage","url":"/delta-compress/docs/Usage#server-data-updated-mutably","content":"local gameStats = { round = 0, playerCount = 0, } local lastSent = deepCopy(gameStats) local function incrementRound() gameStats.round += 1 end local function onPlayerAdded(player: Player) -- When a new player joins, we can send them a diff between nil and gameStats. local initialDiff = DeltaCompress.diff(nil, gameStats) ReplicatedStorage.RoundInfoUpdateRemote:FireClient(initialDiff) end RunService.Heartbeat:Connect(function() local diff = DeltaCompress.diff(lastSent, gameStats) if diff == nil then -- gameStats hasn't changed. return end lastSent = deepCopy(gameStats) ReplicatedStorage.RoundInfoUpdateRemote:FireAllClients(diff) end)  "},{"title":"Client​","type":1,"pageTitle":"Usage","url":"/delta-compress/docs/Usage#client","content":"local gameStats = nil ReplicatedStorage.RoundInfoUpdateRemote.OnClientEvent(function(diff) -- The diff can be applied immutably or mutably depending on your usecase! gameStats = DeltaCompress.applyImmutable(gameStats, diff) end)  "},{"title":"DeltaCompress","type":0,"sectionRef":"#","url":"/delta-compress/api/DeltaCompress","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DeltaCompress","url":"/delta-compress/api/DeltaCompress#functions","content":" "},{"title":"applyImmutable​","type":1,"pageTitle":"DeltaCompress","url":"/delta-compress/api/DeltaCompress#applyImmutable","content":"&lt;/&gt; DeltaCompress.applyImmutable( old: any, diff: buffer ) → any Applies a diff created by DeltaCompress.diff immutably. The old value passed won't mutated, instead, a new value will be returned. local old = { coins = 10, completedTutorial = true } local new = { coins = 320, completedTutorial = true } local diff = DeltaCompress.diff(old, new) local applied = DeltaCompress.applyImmutable(old, diff) print(applied) -- { coins = 320, completedTutorial = true } -- `old` didn't change since the diff was applied immutably. print(old) -- { coins = 10, completedTutorial = true }   "},{"title":"applyMutable​","type":1,"pageTitle":"DeltaCompress","url":"/delta-compress/api/DeltaCompress#applyMutable","content":"&lt;/&gt; DeltaCompress.applyMutable( old: any, diff: buffer ) → any Applies a diff created by DeltaCompress.diff mutably. The old value passed will be mutated. local old = { coins = 10, completedTutorial = true } local new = { coins = 320, completedTutorial = true } local diff = DeltaCompress.diff(old, new) local applied = DeltaCompress.applyMutable(old, diff) print(applied) -- { coins = 320, completedTutorial = true } -- `old` was mutated and returned, `applied` and `old` are the same table. print(applied == old) -- true Though tables are updated mutably, other data types have to be returned from the function: local old = 100 local new = &quot;hello&quot; local diff = DeltaCompress.diff(old, new) local applied = DeltaCompress.applyMutable(old, diff) print(applied) -- &quot;hello&quot;   "},{"title":"diff​","type":1,"pageTitle":"DeltaCompress","url":"/delta-compress/api/DeltaCompress#diff","content":"&lt;/&gt; DeltaCompress.diff( old: any, new: any ) → buffer?-- A buffer representing the difference, or nil if there are no differences. Calculates the difference between old and new and returns it as a buffer. If old and new are identical, it returns nil. local old = { coins = 10, completedTutorial = true } local new = { coins = 320, completedTutorial = true } local diff = DeltaCompress.diff(old, new) -- Returns a buffer that encodes the change in coins.  "}]